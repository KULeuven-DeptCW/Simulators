!	' |\t|\n' ;		/~ Characters to be ignored... ~/

	'\['			/~ Non-associative tokens ~/
	'\]'
	','
	'[0-9]+'	INT	[* %match=parseInt(%match); *]
	'NUL'          /~ nul function ~/
	'SUCC'         /~ succ function ~/
	'P'            /~ Projection ~/
	'PR'           /~ Primitive recursion ~/
	'CN'           /~ Composition ~/
	;


##

/~
	--- And here's the grammar specification ---
~/

p:	e						[* prResult = %1; *]
	;
e: 	  NUL					[*%% = new prNul(); *]
	| SUCC					[*%% = new prSucc(); *]
	| P	'[' INT ',' INT ']'	[*%% = new prProjection(%3,%5); *]
	| PR '[' e ',' e ']'	[*%% = new prRecursion(%3,%5); *]
	| CN '[' e ',' es ']'	[*%% = new prComposite(%3,%5); *]
	;

es:	  e                     [*%% = {head : %1};*]
	| e ',' es              [*%% = {head : %1, tail : %3};*]
	;

[*
var prResult;
var prError_cnt = 0;
var prError_off = new Array();
var prError_la = new Array();
function prparse (str) {
	var str = str.toUpperCase();
	prError_off = new Array();
	prError_la = new Array();
	if((prError_cnt = __##PREFIX##parse(str,prError_off,prError_la)) > 0) {
		prResult = null;
	} else {
		//alert(prResult.tostring());
	}
}
*]

